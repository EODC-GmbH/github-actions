name: "rclone-fake-move"
description: "Emulate rclone move safely for overlapping paths (source inside destination)"
author: "Tom <tom.clark@eodc.eu>"
inputs:
  source_path:
    description: Absolute source path
    required: true
  dest_path:
    description: Rclone destination (e.g., remote:bucket/prefix or absolute path on runner)
    required: true
  transfers:
    description: Number of parallel transfers
    required: false
    default: "6"
  retries:
    description: Max retries for failed transfers
    required: false
    default: "8"
  size_only:
    description: Use --size-only to decide if a file needs transferring
    required: false
    default: "true"
  dry_run:
    description: If true, perform a dry run. No data is moved
    required: false
    default: "false"
  delete_empty_src_dirs:
    description: Remove now-empty source directories after move
    required: false
    default: "true"
  include_pattern:
    description: Optional comma- or newline-separated patterns to include (e.g., "**/*.txt,**/*.csv")
    required: false
    default: ""
  exclude_pattern:
    description: Optional comma- or newline-separated patterns to exclude (e.g., "**/*.log,**/*.tmp")
    required: false
    default: ""
  rclone_config:
    description: Optional rclone config file contents (pass secrets.RCLONE_CONFIG)
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: Install rclone if missing
      shell: bash
      run: |
        set -euo pipefail
        export DEBIAN_FRONTEND=noninteractive
        if ! command -v rclone >/dev/null 2>&1; then
          sudo apt-get update -y
          sudo apt-get install -y rclone
        fi

    - name: Configure rclone (optional)
      if: ${{ inputs.rclone_config != '' }}
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$HOME/.config/rclone"
        chmod 700 "$HOME/.config/rclone"
        touch "$HOME/.config/rclone/rclone.conf"
        printf '%s\n' "${{ inputs.rclone_config }}" > "$HOME/.config/rclone/rclone.conf"
        chmod 600 "$HOME/.config/rclone/rclone.conf"

    - name: Validate and emulate move
      shell: bash
      run: |
        set -euo pipefail

        normalize_patterns() {
          local input="$1"
          printf '%s\n' "$input" \
            | tr ',' '\n' \
            | sed -e 's/^\s\+//' -e 's/\s\+$//' -e "s/^'\(.*\)'$/\1/" -e 's/^"\(.*\)"$/\1/' \
            | awk 'NF'
        }

        rewrite_glob() {
          local pat="$1"
          if [[ "$pat" != */* && "$pat" == *'*'* ]]; then
            printf '%s\n' "**/$pat"
          else
            printf '%s\n' "$pat"
          fi
        }

        src='${{ inputs.source_path }}'
        dst='${{ inputs.dest_path }}'
        transfers='${{ inputs.transfers }}'
        max_retries='${{ inputs.retries }}'
        use_size_only='${{ inputs.size_only }}'
        dry='${{ inputs.dry_run }}'
        del_empty='${{ inputs.delete_empty_src_dirs }}'
        include_pattern='${{ inputs.include_pattern }}'
        exclude_pattern='${{ inputs.exclude_pattern }}'

        if ! [[ "$transfers" =~ ^[1-9][0-9]*$ ]]; then
          echo "ERROR: transfers must be a positive integer (got '$transfers')." >&2
          exit 2
        fi
        if ! [[ "$max_retries" =~ ^[0-9]+$ ]]; then
          echo "ERROR: retries must be a non-negative integer (got '$max_retries')." >&2
          exit 4
        fi

        flags=("--progress" "--transfers" "$transfers" "--retries" "$max_retries")
        if [[ "$use_size_only" == "true" ]]; then
          flags+=("--size-only")
        fi
        if [[ "$dry" == "true" ]]; then
          flags+=("--dry-run")
        fi

        # Determine path relationship (only for local absolute paths)
        dest_inside_src=false
        src_inside_dst=false
        if [[ "$src" == /* && "$dst" == /* ]]; then
          src_real=$(realpath -m "$src")
          dst_real=$(realpath -m "$dst")
          if [[ "$dst_real" == "$src_real" ]]; then
            echo "ERROR: destination path equals source path ($dst_real)." >&2
            exit 6
          fi
          if [[ "$dst_real" == "$src_real"/* ]]; then
            dest_inside_src=true
          fi
          if [[ "$src_real" == "$dst_real"/* ]]; then
            src_inside_dst=true
          fi
        fi

        # Build filter file (needed for both copy and delete phases)
        filter_file="$(mktemp)"
        trap 'rm -f "$filter_file"' EXIT
        printf '%s %s\n' '+' '/**/' >> "$filter_file"
        if [[ "$dest_inside_src" == true ]]; then
          rel="${dst_real#$src_real/}"
          printf '%s %s\n' '-' "/$rel/**" >> "$filter_file"
        fi
        if [[ -n "$exclude_pattern" ]]; then
          while IFS= read -r raw; do
            pat=$(rewrite_glob "$raw")
            printf '%s %s\n' '-' "$pat" >> "$filter_file"
          done < <(normalize_patterns "$exclude_pattern")
        fi
        if [[ -n "$include_pattern" ]]; then
          while IFS= read -r raw; do
            pat=$(rewrite_glob "$raw")
            printf '%s %s\n' '+' "$pat" >> "$filter_file"
          done < <(normalize_patterns "$include_pattern")
          printf '%s %s\n' '-' '*' >> "$filter_file"
        fi

        echo '--- rclone filter rules ---' >&2
        cat "$filter_file" >&2
        echo '---------------------------' >&2

        # Enumerate files once to avoid deleting files added after copy
        list_file="$(mktemp)"
        trap 'rm -f "$filter_file" "$list_file"' EXIT
        lsf_flags=("-R" "--files-only" "--filter-from" "$filter_file")
        echo "Listing files to process: rclone lsf \"$src\" ${lsf_flags[*]}"
        rclone lsf "$src" "${lsf_flags[@]}" > "$list_file"

        if [[ ! -s "$list_file" ]]; then
          echo "No files matched filters; nothing to move."
          exit 0
        fi

        echo "Running: rclone copy \"$src\" \"$dst\" ${flags[*]} --files-from-raw $list_file"
        rclone copy "$src" "$dst" "${flags[@]}" --files-from-raw "$list_file"

        del_flags=("--retries" "$max_retries")
        if [[ "$dry" == "true" ]]; then
          del_flags+=("--dry-run")
        fi
        echo "Running: rclone delete \"$src\" ${del_flags[*]} --files-from-raw $list_file"
        rclone delete "$src" "${del_flags[@]}" --files-from-raw "$list_file"

        if [[ "$del_empty" == "true" ]]; then
          echo "Pruning empty source directories: rclone rmdirs --leave-root \"$src\" ${dry:+--dry-run}"
          rclone rmdirs --leave-root "$src" ${dry:+--dry-run}
        fi
